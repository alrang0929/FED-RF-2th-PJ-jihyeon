import React from 'react';

function addComma(x = 0) {
  /* 
[코드해석]
  x를 문자열로 변환하여 repalce
  를 하는데 정규식에 따라 3번째 숫자에 "," 추가

  정규식 해석:
  1. "/.../g": 시작과 끝, g = global약자, 즉 문자열 전체에서 패턴을 찾으라

  2. \\B: 분자열의 시작부분 or 숫자 사이를 찾아

  3. ?=...: 긍정형 전방 탐색, 뒤에 오는 패턴이 일치하는지 확인, 패턴 확인만 하고 그 값을 포함하지 않음!
      ㄴ> ex: 
    apple 이라는 문자열에서 "ap"뒤의 "ple"가 오는지 확인하고 싶다.
    -> ex: /ap(?=ple)/

  4. (\d{3})+ : 긍정형 전방 탐색, 숫자 3개가 연속으로 반복되는 패턴을 찾아, +는 "하나 이상"의미, 즉 3의 배수 개수만큼의 숫자 패턴 서치

  5. (?!\d): 부정형 전방 탐색, 뒤에 숫자가 오지 않는 곳을 찾는다. 3개 숫자 묶음의 마지막 부분 찾음.

  ㄴ> total 해석: 문자열을 포함하지 않는 숫자열의 3개씩 묶음의 끝부분에 콤마(,) 추가. 

요약: 
1) /g: 문자열 전체에서 패턴을 찾아
2) /B: 묶음의 앞부분인데
3) ?=(...):. 그 앞부분의 패턴들이 조건에 맞는지 확인해줘
4) (\d{3})+ : 3의 배수씩 숫자열을 찾아 체크하고
5) (?!\d): 체크한 3배열의 끝을 찾아
6) ,",": 그 끝에 콤마를 넣어

  */
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }
  
  
  // 내보내기
  export { addComma,};
  